<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:annotation-config/>
    <!--扫描spring注解-->
    <context:component-scan base-package="com.hyx"/>
    <!--加载db.properties-->
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>
    <!--数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--配置别名-->
        <property name="typeAliasesPackage" value="com.hyx.pojo"/>
        <property name="mapperLocations" value="classpath:com/hyx/dao/mapper/*.xml"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
        <!--扫描包，进行映射-->
        <property name="basePackage" value="com.hyx.dao"/>
    </bean>
    <!--开启aspectj的自动代理-->
    <aop:aspectj-autoproxy/>

    <mvc:interceptors>
        <mvc:interceptor>
            <!--/**是对所有请求路径以及子路经进行拦截-->
            <mvc:mapping path="/**"/>
            <!--这儿需要注意，拦截器拦截全部请求的话会把包括静态资源请求也拦截到，
            如果对某些静态资源不拦截可以配置exclude-mapping-->
            <mvc:exclude-mapping path="/css/**"/>
            <mvc:exclude-mapping path="/img/**"/>
            <mvc:exclude-mapping path="/pic/**"/>
            <bean class="com.hyx.interceptor.MyInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    <!--Spring整合Memcached配置-->
<!--    <bean id="propertyConfigurer"-->
<!--          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property name="locations">-->
<!--            <list>-->
<!--                <value>classpath:memcached.properties</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->
<!--    &lt;!&ndash;memcached 客户端 SocketPool&ndash;&gt;-->
<!--    <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"-->
<!--          factory-method="getInstance" init-method="initialize" destroy-method="shutDown">-->
<!--        <constructor-arg>-->
<!--            <value>neeaMemcachedPool</value>-->
<!--        </constructor-arg>-->
<!--        &lt;!&ndash; 可以配置多服务器负载均衡 &ndash;&gt;-->
<!--        <property name="servers">-->
<!--            <list>-->
<!--                <value>${memcache.server}</value>-->
<!--            </list>-->
<!--        </property>-->
<!--        &lt;!&ndash; 初始连接数 &ndash;&gt;-->
<!--        <property name="initConn">-->
<!--            <value>${memcache.initConn}</value>-->
<!--        </property>-->
<!--        &lt;!&ndash; 最小连接数 &ndash;&gt;-->
<!--        <property name="minConn">-->
<!--            <value>${memcache.minConn}</value>-->
<!--        </property>-->
<!--        &lt;!&ndash; 最大连接数 &ndash;&gt;-->
<!--        <property name="maxConn">-->
<!--            <value>${memcache.maxConn}</value>-->
<!--        </property>-->
<!--        &lt;!&ndash; 连接池守护线程的睡眠时间 &ndash;&gt;-->
<!--        <property name="maintSleep">-->
<!--            <value>${memcache.maintSleep}</value>-->
<!--        </property>-->
<!--        <property name="nagle">-->
<!--            <value>${memcache.nagle}</value>-->
<!--        </property>-->
<!--        <property name="socketTO">-->
<!--            <value>${memcache.socketTO}</value>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient">-->
<!--        <constructor-arg>-->
<!--            <value>neeaMemcachedPool</value>-->
<!--        </constructor-arg>-->
<!--    </bean>-->
    <!-- Redis连接池的设置 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 控制一个pool可分配多少个jedis实例 -->
        <property name="maxTotal" value="${redis.pool.maxActive}" />
        <!-- 连接池中最多可空闲maxIdle个连接 ，这里取值为20，表示即使没有数据库连接时依然可以保持20空闲的连接，而不被清除，随时处于待命状态。 -->
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <!-- 最大等待时间:当没有可用连接时,连接池等待连接被归还的最大时间(以毫秒计数),超过时间则抛出异常 -->
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />
        <!-- 在获取连接的时候检查有效性 -->
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
    </bean>

    <!-- 创建Redis连接池，并做相关配置 -->
    <bean id="jedisWritePool" class="com.hyx.util.JedisPoolWriper"
          depends-on="jedisPoolConfig">
        <constructor-arg index="0" ref="jedisPoolConfig" />
        <constructor-arg index="1" value="${redis.hostname}" />
        <constructor-arg index="2" value="${redis.port}" type="int" />
    </bean>
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
    <!-- 创建Redis工具类，封装好Redis的连接以进行相关的操作 -->
    <bean id="jedisUtil" class="com.hyx.util.JedisUtil" >
        <property name="jedisPool">
            <ref bean="jedisWritePool" />
        </property>
    </bean>
    <!-- Redis的key操作 -->
    <bean id="jedisKeys" class="com.hyx.util.JedisUtil$Keys" >
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean>
    <!-- Redis的Strings操作 -->
    <bean id="jedisStrings" class="com.hyx.util.JedisUtil$Strings">
        <constructor-arg ref="jedisUtil"></constructor-arg>
    </bean>

</beans>